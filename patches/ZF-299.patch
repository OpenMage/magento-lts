--- /dev/null
+++ ../library/Zend/Date.php
@@ -121,6 +121,16 @@
     const W3C               = 'WWW';
 
     /**
+     * Minimum allowed year value
+     */
+    const YEAR_MIN_VALUE = -10000;
+
+    /**
+     * Maximum allowed year value
+     */
+    const YEAR_MAX_VALUE = 10000;
+
+    /**
      * Generates the standard date object, could be a unix timestamp, localized date,
      * string, integer, array and so on. Also parts of dates or time are supported
      * Always set the default timezone: http://php.net/date_default_timezone_set
@@ -4786,5 +4796,46 @@
         }
 
         return $token;
+    }
+
+    /**
+     * Get unix timestamp.
+     * Added limitation: $year value must be between -10 000 and 10 000
+     * Parent method implementation causes 504 error if it gets too big(small) year value
+     *
+     * @see Zend_Date_DateObject::mktime
+     * @throws Zend_Date_Exception
+     * @param $hour
+     * @param $minute
+     * @param $second
+     * @param $month
+     * @param $day
+     * @param $year
+     * @param bool $gmt
+     * @return float|int
+     */
+    protected function mktime($hour, $minute, $second, $month, $day, $year, $gmt = false)
+    {
+        $day   = intval($day);
+        $month = intval($month);
+        $year  = intval($year);
+
+        // correct months > 12 and months < 1
+        if ($month > 12) {
+            $overlap = floor($month / 12);
+            $year   += $overlap;
+            $month  -= $overlap * 12;
+        } else {
+            $overlap = ceil((1 - $month) / 12);
+            $year   -= $overlap;
+            $month  += $overlap * 12;
+        }
+
+        if ($year > self::YEAR_MAX_VALUE || $year < self::YEAR_MIN_VALUE) {
+            throw new Zend_Date_Exception('Invalid year, it must be between ' . self::YEAR_MIN_VALUE . ' and '
+                . self::YEAR_MAX_VALUE);
+        }
+
+        return parent::mktime($hour, $minute, $second, $month, $day, $year, $gmt);
     }
 }
